import Mathlib.NumberTheory.Padics.PadicNumbers
import Mathlib.Algebra.Order.Floor
import Mathlib.Data.Nat.Log
import Mathlib.InformationTheory.Hamming
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Fin.Tuple.Take
import Acmoi.dimVC
set_option tactic.hygienic false

/-!

  # VC-dimensions of nondeterministic finite automata for words of equal length
    Theorem 4 on Kathleen Romanik's testing dimension.


-/
open Finset Fintype

lemma fixBits {V : Type*} [DecidableEq V] [Fintype V] (C D : Finset V) (hD : D ‚äÜ C) :
    #(filter (fun H ‚Ü¶ C ‚à© H = D) univ) = #(univ \ C).powerset := by
          apply card_bij _ (by simp : ‚àÄ H hH, (filter (fun x => x ‚àà H) (univ \ C)) ‚àà (univ \ C).powerset)
          ¬∑ simp
            intro A hA B hB h
            have : A \ C = B \ C := by
              ext x
              have : x ‚àà filter (fun x ‚Ü¶ x ‚àà A) (univ \ C)
                   ‚Üî x ‚àà filter (fun x ‚Ü¶ x ‚àà B) (univ \ C) := by rw [h]
              simp at this
              simp_all
            have h‚ÇÄ : A = A \ C ‚à™ C ‚à© A := by ext;simp;tauto
            have h‚ÇÅ : B = B \ C ‚à™ C ‚à© B := by ext;simp;tauto
            rw [h‚ÇÄ, h‚ÇÅ, this, hA, hB]

          ¬∑ simp
            intro A hA
            have h‚ÇÄ : C ‚à© A = ‚àÖ := by
              ext
              simp
              intro _ h
              have := hA h
              simp_all
            use A ‚à™ (C ‚à© D)
            constructor
            ¬∑ have h‚ÇÅ : C ‚à© D = D := inter_eq_right.mpr hD
              rw [inter_union_distrib_left, h‚ÇÄ, h‚ÇÅ, h‚ÇÅ, empty_union]
            ¬∑ ext x
              simp
              constructor
              ¬∑ simp_all
              ¬∑ intro h
                have := hA h
                simp_all

open Fintype

-- lemma shatter_fix {V : Type*} [DecidableEq V] [Fintype V] {C : Finset V}
--     (g‚ÇÄ : ¬¨filter (fun H ‚Ü¶ H ‚à© C ‚â† ‚àÖ) univ = ‚àÖ) :
--     (filter (fun k ‚Ü¶ shatters_all (filter (fun H ‚Ü¶ ¬¨H ‚à© C = ‚àÖ) univ) k) (range (Fintype.card V + 1))).Nonempty := by
--   use 0
--   simp
--   rw [‚Üê shatters_all‚ÇÄ]
--   exact g‚ÇÄ


-- theorem four'  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï)
--     (hm : m > card V):
--     (‚àÄ ùìó : Finset (Finset V), #ùìó > c ‚Üí dimTest ùìó ‚â• m) ‚Üî c ‚â• 2^(card V) - 2^(card V - m) := by
--   sorry

/-- Theorem 4 from "VC-dimensions". -/
theorem four  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï)
    (hm : m ‚â§ card V):
    (‚àÄ ùìó : Finset (Finset V), #ùìó > c ‚Üí dimTest ùìó ‚â• m) ‚Üî c ‚â• 2^(card V) - 2^(card V - m) := by
  constructor
  ¬∑ intro h‚ÇÄ
    by_contra hc
    have h‚ÇÅ : c < 2 ^ Fintype.card V - 2 ^ (Fintype.card V - m) := by omega
    obtain ‚ü®C,hC‚ü© := @subset_of_size V (univ : Finset V) m #(univ : Finset V) rfl hm
    have h‚ÇÇ : 2 ^ Fintype.card V - 2 ^ (Fintype.card V - m) = #(filter (fun H => H ‚à© C ‚â† ‚àÖ) univ) := by
        have h‚ÇÄ : #(filter (fun H => C ‚à© H = ‚àÖ) univ) = #(univ \ C).powerset := by apply fixBits; simp
        have h‚ÇÅ : #(filter (fun H => C ‚à© H = ‚àÖ) univ) = 2^(card V - m) := by
            rw [h‚ÇÄ, card_powerset, card_sdiff hC.1, hC.2]
            rfl
        rw [‚Üê h‚ÇÅ, ‚Üê compl_filter, card_compl]
        simp_all
        simp_rw [‚Üê card_powerset, ‚Üê fixBits C ‚àÖ (by simp), inter_comm]
    have h‚ÇÉ := h‚ÇÄ (filter (fun H => H ‚à© C ‚â† ‚àÖ) univ) (by omega)
    simp only [dimTest] at h‚ÇÉ
    split_ifs at h‚ÇÉ with g‚ÇÄ
    ¬∑ have : m = 0 := by omega
      subst this
      simp_all
    ¬∑ have h‚ÇÑ := (le_max'_iff (filter (fun k ‚Ü¶ shatters_all (filter (fun H ‚Ü¶ ¬¨H ‚à© C = ‚àÖ) univ) k) (range (Fintype.card V + 1)))
        (by use 0; simp; rw [‚Üê shatters_all‚ÇÄ]; exact g‚ÇÄ) m).mp h‚ÇÉ
      simp at h‚ÇÑ
      obtain ‚ü®m',hm'‚ü© := h‚ÇÑ
      have : shatters_all (filter (fun H ‚Ü¶ ¬¨H ‚à© C = ‚àÖ) univ) m := by
        apply shatters_all_mono hm'.1.2 hm'.2
        show m' ‚â§ card V
        omega
      have := this C hC.2 ‚àÖ (by tauto)
      revert this
      simp
      intro x hx
      contrapose hx
      simp_all
      rw [‚Üê hx]
      exact inter_comm x C
  ¬∑ intro h‚ÇÄ ùìó hc
    unfold dimTest
    simp
    split_ifs with g‚ÇÄ
    ¬∑ subst g‚ÇÄ
      simp at hc
    ¬∑ apply le_max'
      simp
      constructor
      ¬∑ omega
      ¬∑ intro C hC D hD         -- lines 1 and 2 of the proof in the paper
        have h‚ÇÄ: #(univ : Finset (Finset V)) = 2^(card V) := by aesop
        have : #(filter (fun H => C ‚à© H = D) (univ : Finset (Finset V)))
             = #((univ : Finset V) \ C).powerset := by apply fixBits; exact hD
        have : #(filter (fun H => C ‚à© H = D) (univ : Finset (Finset V)))
          = 2^(card V - m) := by -- line 3 of the proof in the paper
            rw [this, card_powerset, card_sdiff (subset_univ _), hC]
            rfl
        have by‚ÇÇ : #ùìó > 2^(card V) - 2^(card V - m) := by omega-- line 3 of the proof in the paper
        have : #ùìó·∂ú = 2^card V - #ùìó := by
          rw [card_compl]
          congr
        have : 2^card V - #ùìó < 2^(card V - m) := by
          have fact (H u c : ‚Ñï) (h : H > u - c) (h‚ÇÄ : c ‚â§ u) (h‚ÇÅ : H ‚â§ u) : u - H < c :=
            Nat.sub_lt_right_of_lt_add h‚ÇÅ <| (Nat.sub_lt_iff_lt_add h‚ÇÄ).mp h
          exact fact #ùìó (2^card V) (2^(card V - m)) by‚ÇÇ (by
            apply Nat.pow_le_pow_of_le_right
            simp
            exact Nat.sub_le (Fintype.card V) m) (by
              rw [‚Üê h‚ÇÄ]
              exact card_le_card <| subset_univ ùìó
            )
        have : #ùìó·∂ú < 2^(card V - m) := by omega -- line 4 of the proof in the paper
        have : ¬¨ (filter (fun H => C ‚à© H = D) (univ : Finset (Finset V))) ‚äÜ ùìó·∂ú := by
          intro hc
          have : #(filter (fun H => C ‚à© H = D) (univ : Finset (Finset V))) ‚â§ #ùìó·∂ú := card_le_card hc
          omega
        -- done with line 5 of the paper
        have h‚ÇÅ : (filter (fun H => C ‚à© H = D) (univ : Finset (Finset V))) \ ùìó·∂ú ‚â† ‚àÖ := by
          contrapose this
          simp_all
          apply sdiff_eq_empty_iff_subset.mp
          simp
          tauto
        contrapose h‚ÇÅ
        simp_all
        ext A
        simp
        exact fun h hc => h‚ÇÅ _ hc h

lemma towards_lowerbound‚ÇÄ  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï) :
    2^(card V - m) ‚â• 2^(card V) - c ‚Üí
    c ‚â• 2^(card V) - 2^(card V - m) := by intro h; omega

lemma towards_lowerbound‚ÇÅ  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï) :
       card V - m ‚â• Nat.clog 2 (2^(card V) - c) ‚Üí
    2^(card V - m) ‚â• 2^(Nat.clog 2 (2^(card V) - c)) := by
  apply Nat.pow_le_pow_of_le_right
  simp

lemma towards_lowerbound‚ÇÇ  {V : Type*} [DecidableEq V] [Fintype V] (c : ‚Ñï) :
    2^(Nat.clog 2 (2^(card V) - c))
    ‚â• 2^(card V) - c := by
  refine Nat.le_pow_clog ?hb (2 ^ Fintype.card V - c)
  simp

lemma towards_lowerbound‚ÇÉ  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï) :
       card V - m ‚â• Nat.clog 2 (2^(card V) - c) ‚Üí
    2^(card V - m) ‚â• 2^(card V) - c := by
  intro h
  apply ge_trans (towards_lowerbound‚ÇÅ c m h)
  apply towards_lowerbound‚ÇÇ


-- lemma towards_lowerbound‚ÇÑ  {V : Type*} [DecidableEq V] [Fintype V] (c m : ‚Ñï)
--     (h‚ÇÄ : m ‚â§ card V):
--        m ‚â§ card V - Nat.clog 2 (2^(card V) - c)  ‚Üí

--        Nat.clog 2 (2^(card V) - c) ‚â§ card V - m  := by
--   intro h
--   exact (@le_tsub_iff_le_tsub ‚Ñï _ _ _ _ _ _ m (card V) (Nat.clog 2 (2 ^ Fintype.card V - c)) _
--     h‚ÇÄ (by
--       -- have : card V ‚â§ 2^(Nat.clog 2 (card V)) := by sorry
--       suffices  2^(Nat.clog 2 (2 ^ Fintype.card V - c)) ‚â§ 2^(card V) by
--         apply (Nat.le_pow_iff_clog_le _).mp
--         suffices card V - c ‚â§ card V by exact Nat.sub_le (2 ^ Fintype.card V) c
--         omega
--         simp
--       sorry
--     )).mp h
